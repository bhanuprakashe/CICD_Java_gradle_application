pipeline{
    agent any
    environment{
        VERSION = "${env.BUILD_ID}"
    }
    stages{
        stage("SONAR QUALITY CHECK"){
            agent {
                docker {
                    image 'openjdk:11'
                }
            }
            steps{
                script{
                    withSonarQubeEnv(credentialsId: 'sonar-token') {
                        sh 'chmod +x gradlew'
                        sh './gradlew sonarqube'
                    }

                    timeout(5) {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                           error "Pipeline aborted due to quality gate failure: ${qg.status}"
                      }
                    }
                }
            }
        }    
        stage("DOCKER BUILD & PUSH"){
            steps{
                script{
                    withCredentials([string(credentialsId: 'nexus_pass', variable: 'nexus_password')]) {
                            sh '''
                                docker build -t 10.0.2.43:8083/springapp:${VERSION} .
                                docker login -u admin -p $nexus_password 10.0.2.43:8083
                                docker push 10.0.2.43:8083/springapp:${VERSION}
                                docker rmi 10.0.2.43:8083/springapp:${VERSION}
                            '''
                    }
                }
            }
        }
        stage("Identifying misConfig Using DATREE in HELMCHART's"){
            steps{
                script{
                    dir('kubernetes/') {
                        withEnv(['DATREE_TOKEN=28bc3cbf-4f00-44ea-bce6-3965d3eb9dae']) {
                            sh 'helm datree test myapp/'
                        }
                        
                    }
                }
            }
        }
    }
    post {
		always {
			mail bcc: '', body: "<br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> URL de build: ${env.BUILD_URL}", cc: '', charset: 'UTF-8', from: '', mimeType: 'text/html', replyTo: '', subject: "${currentBuild.result} CI: Project name -> ${env.JOB_NAME}", to: "manujmohantyy@gmail.com";  
		}
	}
}
